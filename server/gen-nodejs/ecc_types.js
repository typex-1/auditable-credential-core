//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var InitParame = module.exports.InitParame = function(args) {
  this.L = null;
  if (args) {
    if (args.L !== undefined && args.L !== null) {
      this.L = args.L;
    }
  }
};
InitParame.prototype = {};
InitParame.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.L = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InitParame.prototype.write = function(output) {
  output.writeStructBegin('InitParame');
  if (this.L !== null && this.L !== undefined) {
    output.writeFieldBegin('L', Thrift.Type.STRING, 1);
    output.writeString(this.L);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProtocolOne = module.exports.ProtocolOne = function(args) {
  this.t1 = null;
  this.t2 = null;
  this.t3 = null;
  this.t4 = null;
  this.t5 = null;
  this.gamma = null;
  this.sz1 = null;
  this.sz = null;
  this.sa = null;
  this.sb1 = null;
  this.sb2 = null;
  this.sg = null;
  this.sh = null;
  this.sy = null;
  this.M = null;
  this.L = null;
  this.d = null;
  this.u = null;
  this.x = null;
  this.s1 = null;
  this.s2 = null;
  this.v = null;
  this.sxi = null;
  if (args) {
    if (args.t1 !== undefined && args.t1 !== null) {
      this.t1 = args.t1;
    }
    if (args.t2 !== undefined && args.t2 !== null) {
      this.t2 = args.t2;
    }
    if (args.t3 !== undefined && args.t3 !== null) {
      this.t3 = args.t3;
    }
    if (args.t4 !== undefined && args.t4 !== null) {
      this.t4 = args.t4;
    }
    if (args.t5 !== undefined && args.t5 !== null) {
      this.t5 = args.t5;
    }
    if (args.gamma !== undefined && args.gamma !== null) {
      this.gamma = args.gamma;
    }
    if (args.sz1 !== undefined && args.sz1 !== null) {
      this.sz1 = args.sz1;
    }
    if (args.sz !== undefined && args.sz !== null) {
      this.sz = args.sz;
    }
    if (args.sa !== undefined && args.sa !== null) {
      this.sa = args.sa;
    }
    if (args.sb1 !== undefined && args.sb1 !== null) {
      this.sb1 = args.sb1;
    }
    if (args.sb2 !== undefined && args.sb2 !== null) {
      this.sb2 = args.sb2;
    }
    if (args.sg !== undefined && args.sg !== null) {
      this.sg = args.sg;
    }
    if (args.sh !== undefined && args.sh !== null) {
      this.sh = args.sh;
    }
    if (args.sy !== undefined && args.sy !== null) {
      this.sy = args.sy;
    }
    if (args.M !== undefined && args.M !== null) {
      this.M = args.M;
    }
    if (args.L !== undefined && args.L !== null) {
      this.L = args.L;
    }
    if (args.d !== undefined && args.d !== null) {
      this.d = args.d;
    }
    if (args.u !== undefined && args.u !== null) {
      this.u = args.u;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.s1 !== undefined && args.s1 !== null) {
      this.s1 = args.s1;
    }
    if (args.s2 !== undefined && args.s2 !== null) {
      this.s2 = args.s2;
    }
    if (args.v !== undefined && args.v !== null) {
      this.v = args.v;
    }
    if (args.sxi !== undefined && args.sxi !== null) {
      this.sxi = args.sxi;
    }
  }
};
ProtocolOne.prototype = {};
ProtocolOne.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.t1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.t2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.t3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.t4 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.t5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.gamma = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sz1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sz = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sa = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sb1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.sb2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sh = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.sy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.M = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.L = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.d = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.u = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.x = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.s1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.s2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.v = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.sxi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProtocolOne.prototype.write = function(output) {
  output.writeStructBegin('ProtocolOne');
  if (this.t1 !== null && this.t1 !== undefined) {
    output.writeFieldBegin('t1', Thrift.Type.STRING, 1);
    output.writeString(this.t1);
    output.writeFieldEnd();
  }
  if (this.t2 !== null && this.t2 !== undefined) {
    output.writeFieldBegin('t2', Thrift.Type.STRING, 2);
    output.writeString(this.t2);
    output.writeFieldEnd();
  }
  if (this.t3 !== null && this.t3 !== undefined) {
    output.writeFieldBegin('t3', Thrift.Type.STRING, 3);
    output.writeString(this.t3);
    output.writeFieldEnd();
  }
  if (this.t4 !== null && this.t4 !== undefined) {
    output.writeFieldBegin('t4', Thrift.Type.STRING, 4);
    output.writeString(this.t4);
    output.writeFieldEnd();
  }
  if (this.t5 !== null && this.t5 !== undefined) {
    output.writeFieldBegin('t5', Thrift.Type.STRING, 5);
    output.writeString(this.t5);
    output.writeFieldEnd();
  }
  if (this.gamma !== null && this.gamma !== undefined) {
    output.writeFieldBegin('gamma', Thrift.Type.STRING, 6);
    output.writeString(this.gamma);
    output.writeFieldEnd();
  }
  if (this.sz1 !== null && this.sz1 !== undefined) {
    output.writeFieldBegin('sz1', Thrift.Type.STRING, 7);
    output.writeString(this.sz1);
    output.writeFieldEnd();
  }
  if (this.sz !== null && this.sz !== undefined) {
    output.writeFieldBegin('sz', Thrift.Type.STRING, 8);
    output.writeString(this.sz);
    output.writeFieldEnd();
  }
  if (this.sa !== null && this.sa !== undefined) {
    output.writeFieldBegin('sa', Thrift.Type.STRING, 9);
    output.writeString(this.sa);
    output.writeFieldEnd();
  }
  if (this.sb1 !== null && this.sb1 !== undefined) {
    output.writeFieldBegin('sb1', Thrift.Type.STRING, 10);
    output.writeString(this.sb1);
    output.writeFieldEnd();
  }
  if (this.sb2 !== null && this.sb2 !== undefined) {
    output.writeFieldBegin('sb2', Thrift.Type.STRING, 11);
    output.writeString(this.sb2);
    output.writeFieldEnd();
  }
  if (this.sg !== null && this.sg !== undefined) {
    output.writeFieldBegin('sg', Thrift.Type.STRING, 12);
    output.writeString(this.sg);
    output.writeFieldEnd();
  }
  if (this.sh !== null && this.sh !== undefined) {
    output.writeFieldBegin('sh', Thrift.Type.STRING, 13);
    output.writeString(this.sh);
    output.writeFieldEnd();
  }
  if (this.sy !== null && this.sy !== undefined) {
    output.writeFieldBegin('sy', Thrift.Type.STRING, 14);
    output.writeString(this.sy);
    output.writeFieldEnd();
  }
  if (this.M !== null && this.M !== undefined) {
    output.writeFieldBegin('M', Thrift.Type.STRING, 15);
    output.writeString(this.M);
    output.writeFieldEnd();
  }
  if (this.L !== null && this.L !== undefined) {
    output.writeFieldBegin('L', Thrift.Type.STRING, 16);
    output.writeString(this.L);
    output.writeFieldEnd();
  }
  if (this.d !== null && this.d !== undefined) {
    output.writeFieldBegin('d', Thrift.Type.STRING, 17);
    output.writeString(this.d);
    output.writeFieldEnd();
  }
  if (this.u !== null && this.u !== undefined) {
    output.writeFieldBegin('u', Thrift.Type.STRING, 18);
    output.writeString(this.u);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.STRING, 19);
    output.writeString(this.x);
    output.writeFieldEnd();
  }
  if (this.s1 !== null && this.s1 !== undefined) {
    output.writeFieldBegin('s1', Thrift.Type.STRING, 20);
    output.writeString(this.s1);
    output.writeFieldEnd();
  }
  if (this.s2 !== null && this.s2 !== undefined) {
    output.writeFieldBegin('s2', Thrift.Type.STRING, 21);
    output.writeString(this.s2);
    output.writeFieldEnd();
  }
  if (this.v !== null && this.v !== undefined) {
    output.writeFieldBegin('v', Thrift.Type.STRING, 22);
    output.writeString(this.v);
    output.writeFieldEnd();
  }
  if (this.sxi !== null && this.sxi !== undefined) {
    output.writeFieldBegin('sxi', Thrift.Type.STRING, 23);
    output.writeString(this.sxi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReturnOne = module.exports.ReturnOne = function(args) {
  this.zeta1 = null;
  this.zeta2 = null;
  this.alpha = null;
  this.beta1 = null;
  this.beta2 = null;
  this.epsilon = null;
  this.e = null;
  this.c = null;
  this.r = null;
  this.roi = null;
  this.omega = null;
  this.sigma1 = null;
  this.sigma2 = null;
  this.delta = null;
  this.xiv = null;
  this.sxiv = null;
  this.szeta1 = null;
  this.szeta2 = null;
  if (args) {
    if (args.zeta1 !== undefined && args.zeta1 !== null) {
      this.zeta1 = args.zeta1;
    }
    if (args.zeta2 !== undefined && args.zeta2 !== null) {
      this.zeta2 = args.zeta2;
    }
    if (args.alpha !== undefined && args.alpha !== null) {
      this.alpha = args.alpha;
    }
    if (args.beta1 !== undefined && args.beta1 !== null) {
      this.beta1 = args.beta1;
    }
    if (args.beta2 !== undefined && args.beta2 !== null) {
      this.beta2 = args.beta2;
    }
    if (args.epsilon !== undefined && args.epsilon !== null) {
      this.epsilon = args.epsilon;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.c !== undefined && args.c !== null) {
      this.c = args.c;
    }
    if (args.r !== undefined && args.r !== null) {
      this.r = args.r;
    }
    if (args.roi !== undefined && args.roi !== null) {
      this.roi = args.roi;
    }
    if (args.omega !== undefined && args.omega !== null) {
      this.omega = args.omega;
    }
    if (args.sigma1 !== undefined && args.sigma1 !== null) {
      this.sigma1 = args.sigma1;
    }
    if (args.sigma2 !== undefined && args.sigma2 !== null) {
      this.sigma2 = args.sigma2;
    }
    if (args.delta !== undefined && args.delta !== null) {
      this.delta = args.delta;
    }
    if (args.xiv !== undefined && args.xiv !== null) {
      this.xiv = args.xiv;
    }
    if (args.sxiv !== undefined && args.sxiv !== null) {
      this.sxiv = args.sxiv;
    }
    if (args.szeta1 !== undefined && args.szeta1 !== null) {
      this.szeta1 = args.szeta1;
    }
    if (args.szeta2 !== undefined && args.szeta2 !== null) {
      this.szeta2 = args.szeta2;
    }
  }
};
ReturnOne.prototype = {};
ReturnOne.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.zeta1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.zeta2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.alpha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.beta1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.beta2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.epsilon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.e = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.c = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.r = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.roi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.omega = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sigma1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sigma2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.delta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.xiv = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.sxiv = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.szeta1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.szeta2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReturnOne.prototype.write = function(output) {
  output.writeStructBegin('ReturnOne');
  if (this.zeta1 !== null && this.zeta1 !== undefined) {
    output.writeFieldBegin('zeta1', Thrift.Type.STRING, 1);
    output.writeString(this.zeta1);
    output.writeFieldEnd();
  }
  if (this.zeta2 !== null && this.zeta2 !== undefined) {
    output.writeFieldBegin('zeta2', Thrift.Type.STRING, 2);
    output.writeString(this.zeta2);
    output.writeFieldEnd();
  }
  if (this.alpha !== null && this.alpha !== undefined) {
    output.writeFieldBegin('alpha', Thrift.Type.STRING, 3);
    output.writeString(this.alpha);
    output.writeFieldEnd();
  }
  if (this.beta1 !== null && this.beta1 !== undefined) {
    output.writeFieldBegin('beta1', Thrift.Type.STRING, 4);
    output.writeString(this.beta1);
    output.writeFieldEnd();
  }
  if (this.beta2 !== null && this.beta2 !== undefined) {
    output.writeFieldBegin('beta2', Thrift.Type.STRING, 5);
    output.writeString(this.beta2);
    output.writeFieldEnd();
  }
  if (this.epsilon !== null && this.epsilon !== undefined) {
    output.writeFieldBegin('epsilon', Thrift.Type.STRING, 6);
    output.writeString(this.epsilon);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRING, 7);
    output.writeString(this.e);
    output.writeFieldEnd();
  }
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.STRING, 8);
    output.writeString(this.c);
    output.writeFieldEnd();
  }
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.STRING, 9);
    output.writeString(this.r);
    output.writeFieldEnd();
  }
  if (this.roi !== null && this.roi !== undefined) {
    output.writeFieldBegin('roi', Thrift.Type.STRING, 10);
    output.writeString(this.roi);
    output.writeFieldEnd();
  }
  if (this.omega !== null && this.omega !== undefined) {
    output.writeFieldBegin('omega', Thrift.Type.STRING, 11);
    output.writeString(this.omega);
    output.writeFieldEnd();
  }
  if (this.sigma1 !== null && this.sigma1 !== undefined) {
    output.writeFieldBegin('sigma1', Thrift.Type.STRING, 12);
    output.writeString(this.sigma1);
    output.writeFieldEnd();
  }
  if (this.sigma2 !== null && this.sigma2 !== undefined) {
    output.writeFieldBegin('sigma2', Thrift.Type.STRING, 13);
    output.writeString(this.sigma2);
    output.writeFieldEnd();
  }
  if (this.delta !== null && this.delta !== undefined) {
    output.writeFieldBegin('delta', Thrift.Type.STRING, 14);
    output.writeString(this.delta);
    output.writeFieldEnd();
  }
  if (this.xiv !== null && this.xiv !== undefined) {
    output.writeFieldBegin('xiv', Thrift.Type.STRING, 15);
    output.writeString(this.xiv);
    output.writeFieldEnd();
  }
  if (this.sxiv !== null && this.sxiv !== undefined) {
    output.writeFieldBegin('sxiv', Thrift.Type.STRING, 16);
    output.writeString(this.sxiv);
    output.writeFieldEnd();
  }
  if (this.szeta1 !== null && this.szeta1 !== undefined) {
    output.writeFieldBegin('szeta1', Thrift.Type.STRING, 17);
    output.writeString(this.szeta1);
    output.writeFieldEnd();
  }
  if (this.szeta2 !== null && this.szeta2 !== undefined) {
    output.writeFieldBegin('szeta2', Thrift.Type.STRING, 18);
    output.writeString(this.szeta2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReturnTwo = module.exports.ReturnTwo = function(args) {
  this.omdelta = null;
  this.hashres = null;
  if (args) {
    if (args.omdelta !== undefined && args.omdelta !== null) {
      this.omdelta = args.omdelta;
    }
    if (args.hashres !== undefined && args.hashres !== null) {
      this.hashres = args.hashres;
    }
  }
};
ReturnTwo.prototype = {};
ReturnTwo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.omdelta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hashres = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReturnTwo.prototype.write = function(output) {
  output.writeStructBegin('ReturnTwo');
  if (this.omdelta !== null && this.omdelta !== undefined) {
    output.writeFieldBegin('omdelta', Thrift.Type.STRING, 1);
    output.writeString(this.omdelta);
    output.writeFieldEnd();
  }
  if (this.hashres !== null && this.hashres !== undefined) {
    output.writeFieldBegin('hashres', Thrift.Type.STRING, 2);
    output.writeString(this.hashres);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProtocolTwo = module.exports.ProtocolTwo = function(args) {
  this.omega = null;
  this.delta = null;
  this.L = null;
  this.sg = null;
  this.roi = null;
  this.sy = null;
  this.sigma1 = null;
  this.sigma2 = null;
  this.szeta1 = null;
  this.szeta2 = null;
  this.sh = null;
  this.m = null;
  if (args) {
    if (args.omega !== undefined && args.omega !== null) {
      this.omega = args.omega;
    }
    if (args.delta !== undefined && args.delta !== null) {
      this.delta = args.delta;
    }
    if (args.L !== undefined && args.L !== null) {
      this.L = args.L;
    }
    if (args.sg !== undefined && args.sg !== null) {
      this.sg = args.sg;
    }
    if (args.roi !== undefined && args.roi !== null) {
      this.roi = args.roi;
    }
    if (args.sy !== undefined && args.sy !== null) {
      this.sy = args.sy;
    }
    if (args.sigma1 !== undefined && args.sigma1 !== null) {
      this.sigma1 = args.sigma1;
    }
    if (args.sigma2 !== undefined && args.sigma2 !== null) {
      this.sigma2 = args.sigma2;
    }
    if (args.szeta1 !== undefined && args.szeta1 !== null) {
      this.szeta1 = args.szeta1;
    }
    if (args.szeta2 !== undefined && args.szeta2 !== null) {
      this.szeta2 = args.szeta2;
    }
    if (args.sh !== undefined && args.sh !== null) {
      this.sh = args.sh;
    }
    if (args.m !== undefined && args.m !== null) {
      this.m = args.m;
    }
  }
};
ProtocolTwo.prototype = {};
ProtocolTwo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.omega = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.L = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sigma1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sigma2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.szeta1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.szeta2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.sh = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.m = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProtocolTwo.prototype.write = function(output) {
  output.writeStructBegin('ProtocolTwo');
  if (this.omega !== null && this.omega !== undefined) {
    output.writeFieldBegin('omega', Thrift.Type.STRING, 1);
    output.writeString(this.omega);
    output.writeFieldEnd();
  }
  if (this.delta !== null && this.delta !== undefined) {
    output.writeFieldBegin('delta', Thrift.Type.STRING, 2);
    output.writeString(this.delta);
    output.writeFieldEnd();
  }
  if (this.L !== null && this.L !== undefined) {
    output.writeFieldBegin('L', Thrift.Type.STRING, 3);
    output.writeString(this.L);
    output.writeFieldEnd();
  }
  if (this.sg !== null && this.sg !== undefined) {
    output.writeFieldBegin('sg', Thrift.Type.STRING, 4);
    output.writeString(this.sg);
    output.writeFieldEnd();
  }
  if (this.roi !== null && this.roi !== undefined) {
    output.writeFieldBegin('roi', Thrift.Type.STRING, 5);
    output.writeString(this.roi);
    output.writeFieldEnd();
  }
  if (this.sy !== null && this.sy !== undefined) {
    output.writeFieldBegin('sy', Thrift.Type.STRING, 6);
    output.writeString(this.sy);
    output.writeFieldEnd();
  }
  if (this.sigma1 !== null && this.sigma1 !== undefined) {
    output.writeFieldBegin('sigma1', Thrift.Type.STRING, 7);
    output.writeString(this.sigma1);
    output.writeFieldEnd();
  }
  if (this.sigma2 !== null && this.sigma2 !== undefined) {
    output.writeFieldBegin('sigma2', Thrift.Type.STRING, 8);
    output.writeString(this.sigma2);
    output.writeFieldEnd();
  }
  if (this.szeta1 !== null && this.szeta1 !== undefined) {
    output.writeFieldBegin('szeta1', Thrift.Type.STRING, 9);
    output.writeString(this.szeta1);
    output.writeFieldEnd();
  }
  if (this.szeta2 !== null && this.szeta2 !== undefined) {
    output.writeFieldBegin('szeta2', Thrift.Type.STRING, 10);
    output.writeString(this.szeta2);
    output.writeFieldEnd();
  }
  if (this.sh !== null && this.sh !== undefined) {
    output.writeFieldBegin('sh', Thrift.Type.STRING, 11);
    output.writeString(this.sh);
    output.writeFieldEnd();
  }
  if (this.m !== null && this.m !== undefined) {
    output.writeFieldBegin('m', Thrift.Type.STRING, 12);
    output.writeString(this.m);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicParame = module.exports.PublicParame = function(args) {
  this.g = null;
  this.h = null;
  this.sg = null;
  this.sh = null;
  this.x = null;
  this.y = null;
  this.gamma = null;
  this.xi = null;
  this.sy = null;
  this.sxi = null;
  this.z = null;
  this.sz = null;
  if (args) {
    if (args.g !== undefined && args.g !== null) {
      this.g = args.g;
    }
    if (args.h !== undefined && args.h !== null) {
      this.h = args.h;
    }
    if (args.sg !== undefined && args.sg !== null) {
      this.sg = args.sg;
    }
    if (args.sh !== undefined && args.sh !== null) {
      this.sh = args.sh;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.gamma !== undefined && args.gamma !== null) {
      this.gamma = args.gamma;
    }
    if (args.xi !== undefined && args.xi !== null) {
      this.xi = args.xi;
    }
    if (args.sy !== undefined && args.sy !== null) {
      this.sy = args.sy;
    }
    if (args.sxi !== undefined && args.sxi !== null) {
      this.sxi = args.sxi;
    }
    if (args.z !== undefined && args.z !== null) {
      this.z = args.z;
    }
    if (args.sz !== undefined && args.sz !== null) {
      this.sz = args.sz;
    }
  }
};
PublicParame.prototype = {};
PublicParame.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.g = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.h = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sh = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.x = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.y = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.gamma = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.xi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sxi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.z = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sz = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicParame.prototype.write = function(output) {
  output.writeStructBegin('PublicParame');
  if (this.g !== null && this.g !== undefined) {
    output.writeFieldBegin('g', Thrift.Type.STRING, 1);
    output.writeString(this.g);
    output.writeFieldEnd();
  }
  if (this.h !== null && this.h !== undefined) {
    output.writeFieldBegin('h', Thrift.Type.STRING, 2);
    output.writeString(this.h);
    output.writeFieldEnd();
  }
  if (this.sg !== null && this.sg !== undefined) {
    output.writeFieldBegin('sg', Thrift.Type.STRING, 3);
    output.writeString(this.sg);
    output.writeFieldEnd();
  }
  if (this.sh !== null && this.sh !== undefined) {
    output.writeFieldBegin('sh', Thrift.Type.STRING, 4);
    output.writeString(this.sh);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.STRING, 5);
    output.writeString(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.STRING, 6);
    output.writeString(this.y);
    output.writeFieldEnd();
  }
  if (this.gamma !== null && this.gamma !== undefined) {
    output.writeFieldBegin('gamma', Thrift.Type.STRING, 7);
    output.writeString(this.gamma);
    output.writeFieldEnd();
  }
  if (this.xi !== null && this.xi !== undefined) {
    output.writeFieldBegin('xi', Thrift.Type.STRING, 8);
    output.writeString(this.xi);
    output.writeFieldEnd();
  }
  if (this.sy !== null && this.sy !== undefined) {
    output.writeFieldBegin('sy', Thrift.Type.STRING, 9);
    output.writeString(this.sy);
    output.writeFieldEnd();
  }
  if (this.sxi !== null && this.sxi !== undefined) {
    output.writeFieldBegin('sxi', Thrift.Type.STRING, 10);
    output.writeString(this.sxi);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.STRING, 11);
    output.writeString(this.z);
    output.writeFieldEnd();
  }
  if (this.sz !== null && this.sz !== undefined) {
    output.writeFieldBegin('sz', Thrift.Type.STRING, 12);
    output.writeString(this.sz);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IssueParame = module.exports.IssueParame = function(args) {
  this.L = null;
  this.sg = null;
  this.sh = null;
  this.yt = null;
  this.gamma = null;
  this.sz = null;
  if (args) {
    if (args.L !== undefined && args.L !== null) {
      this.L = args.L;
    }
    if (args.sg !== undefined && args.sg !== null) {
      this.sg = args.sg;
    }
    if (args.sh !== undefined && args.sh !== null) {
      this.sh = args.sh;
    }
    if (args.yt !== undefined && args.yt !== null) {
      this.yt = args.yt;
    }
    if (args.gamma !== undefined && args.gamma !== null) {
      this.gamma = args.gamma;
    }
    if (args.sz !== undefined && args.sz !== null) {
      this.sz = args.sz;
    }
  }
};
IssueParame.prototype = {};
IssueParame.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.L = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sh = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.yt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gamma = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sz = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IssueParame.prototype.write = function(output) {
  output.writeStructBegin('IssueParame');
  if (this.L !== null && this.L !== undefined) {
    output.writeFieldBegin('L', Thrift.Type.STRING, 1);
    output.writeString(this.L);
    output.writeFieldEnd();
  }
  if (this.sg !== null && this.sg !== undefined) {
    output.writeFieldBegin('sg', Thrift.Type.STRING, 2);
    output.writeString(this.sg);
    output.writeFieldEnd();
  }
  if (this.sh !== null && this.sh !== undefined) {
    output.writeFieldBegin('sh', Thrift.Type.STRING, 3);
    output.writeString(this.sh);
    output.writeFieldEnd();
  }
  if (this.yt !== null && this.yt !== undefined) {
    output.writeFieldBegin('yt', Thrift.Type.STRING, 4);
    output.writeString(this.yt);
    output.writeFieldEnd();
  }
  if (this.gamma !== null && this.gamma !== undefined) {
    output.writeFieldBegin('gamma', Thrift.Type.STRING, 5);
    output.writeString(this.gamma);
    output.writeFieldEnd();
  }
  if (this.sz !== null && this.sz !== undefined) {
    output.writeFieldBegin('sz', Thrift.Type.STRING, 6);
    output.writeString(this.sz);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RetIssue = module.exports.RetIssue = function(args) {
  this.zu = null;
  this.v = null;
  this.u = null;
  this.d = null;
  this.s1 = null;
  this.s2 = null;
  this.t1 = null;
  this.t2 = null;
  this.t3 = null;
  this.t4 = null;
  this.t5 = null;
  this.z1 = null;
  this.z2 = null;
  this.a = null;
  this.b1 = null;
  this.b2 = null;
  this.szu = null;
  this.sz1 = null;
  this.sz2 = null;
  this.sa = null;
  this.sb1 = null;
  this.sb2 = null;
  if (args) {
    if (args.zu !== undefined && args.zu !== null) {
      this.zu = args.zu;
    }
    if (args.v !== undefined && args.v !== null) {
      this.v = args.v;
    }
    if (args.u !== undefined && args.u !== null) {
      this.u = args.u;
    }
    if (args.d !== undefined && args.d !== null) {
      this.d = args.d;
    }
    if (args.s1 !== undefined && args.s1 !== null) {
      this.s1 = args.s1;
    }
    if (args.s2 !== undefined && args.s2 !== null) {
      this.s2 = args.s2;
    }
    if (args.t1 !== undefined && args.t1 !== null) {
      this.t1 = args.t1;
    }
    if (args.t2 !== undefined && args.t2 !== null) {
      this.t2 = args.t2;
    }
    if (args.t3 !== undefined && args.t3 !== null) {
      this.t3 = args.t3;
    }
    if (args.t4 !== undefined && args.t4 !== null) {
      this.t4 = args.t4;
    }
    if (args.t5 !== undefined && args.t5 !== null) {
      this.t5 = args.t5;
    }
    if (args.z1 !== undefined && args.z1 !== null) {
      this.z1 = args.z1;
    }
    if (args.z2 !== undefined && args.z2 !== null) {
      this.z2 = args.z2;
    }
    if (args.a !== undefined && args.a !== null) {
      this.a = args.a;
    }
    if (args.b1 !== undefined && args.b1 !== null) {
      this.b1 = args.b1;
    }
    if (args.b2 !== undefined && args.b2 !== null) {
      this.b2 = args.b2;
    }
    if (args.szu !== undefined && args.szu !== null) {
      this.szu = args.szu;
    }
    if (args.sz1 !== undefined && args.sz1 !== null) {
      this.sz1 = args.sz1;
    }
    if (args.sz2 !== undefined && args.sz2 !== null) {
      this.sz2 = args.sz2;
    }
    if (args.sa !== undefined && args.sa !== null) {
      this.sa = args.sa;
    }
    if (args.sb1 !== undefined && args.sb1 !== null) {
      this.sb1 = args.sb1;
    }
    if (args.sb2 !== undefined && args.sb2 !== null) {
      this.sb2 = args.sb2;
    }
  }
};
RetIssue.prototype = {};
RetIssue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.zu = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.v = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.u = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.d = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.s1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.s2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.t1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.t2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.t3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.t4 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.t5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.z1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.z2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.a = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.b1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.b2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.szu = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.sz1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.sz2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.sa = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.sb1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.sb2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RetIssue.prototype.write = function(output) {
  output.writeStructBegin('RetIssue');
  if (this.zu !== null && this.zu !== undefined) {
    output.writeFieldBegin('zu', Thrift.Type.STRING, 1);
    output.writeString(this.zu);
    output.writeFieldEnd();
  }
  if (this.v !== null && this.v !== undefined) {
    output.writeFieldBegin('v', Thrift.Type.STRING, 2);
    output.writeString(this.v);
    output.writeFieldEnd();
  }
  if (this.u !== null && this.u !== undefined) {
    output.writeFieldBegin('u', Thrift.Type.STRING, 3);
    output.writeString(this.u);
    output.writeFieldEnd();
  }
  if (this.d !== null && this.d !== undefined) {
    output.writeFieldBegin('d', Thrift.Type.STRING, 4);
    output.writeString(this.d);
    output.writeFieldEnd();
  }
  if (this.s1 !== null && this.s1 !== undefined) {
    output.writeFieldBegin('s1', Thrift.Type.STRING, 5);
    output.writeString(this.s1);
    output.writeFieldEnd();
  }
  if (this.s2 !== null && this.s2 !== undefined) {
    output.writeFieldBegin('s2', Thrift.Type.STRING, 6);
    output.writeString(this.s2);
    output.writeFieldEnd();
  }
  if (this.t1 !== null && this.t1 !== undefined) {
    output.writeFieldBegin('t1', Thrift.Type.STRING, 7);
    output.writeString(this.t1);
    output.writeFieldEnd();
  }
  if (this.t2 !== null && this.t2 !== undefined) {
    output.writeFieldBegin('t2', Thrift.Type.STRING, 8);
    output.writeString(this.t2);
    output.writeFieldEnd();
  }
  if (this.t3 !== null && this.t3 !== undefined) {
    output.writeFieldBegin('t3', Thrift.Type.STRING, 9);
    output.writeString(this.t3);
    output.writeFieldEnd();
  }
  if (this.t4 !== null && this.t4 !== undefined) {
    output.writeFieldBegin('t4', Thrift.Type.STRING, 10);
    output.writeString(this.t4);
    output.writeFieldEnd();
  }
  if (this.t5 !== null && this.t5 !== undefined) {
    output.writeFieldBegin('t5', Thrift.Type.STRING, 11);
    output.writeString(this.t5);
    output.writeFieldEnd();
  }
  if (this.z1 !== null && this.z1 !== undefined) {
    output.writeFieldBegin('z1', Thrift.Type.STRING, 12);
    output.writeString(this.z1);
    output.writeFieldEnd();
  }
  if (this.z2 !== null && this.z2 !== undefined) {
    output.writeFieldBegin('z2', Thrift.Type.STRING, 13);
    output.writeString(this.z2);
    output.writeFieldEnd();
  }
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.STRING, 14);
    output.writeString(this.a);
    output.writeFieldEnd();
  }
  if (this.b1 !== null && this.b1 !== undefined) {
    output.writeFieldBegin('b1', Thrift.Type.STRING, 15);
    output.writeString(this.b1);
    output.writeFieldEnd();
  }
  if (this.b2 !== null && this.b2 !== undefined) {
    output.writeFieldBegin('b2', Thrift.Type.STRING, 16);
    output.writeString(this.b2);
    output.writeFieldEnd();
  }
  if (this.szu !== null && this.szu !== undefined) {
    output.writeFieldBegin('szu', Thrift.Type.STRING, 17);
    output.writeString(this.szu);
    output.writeFieldEnd();
  }
  if (this.sz1 !== null && this.sz1 !== undefined) {
    output.writeFieldBegin('sz1', Thrift.Type.STRING, 18);
    output.writeString(this.sz1);
    output.writeFieldEnd();
  }
  if (this.sz2 !== null && this.sz2 !== undefined) {
    output.writeFieldBegin('sz2', Thrift.Type.STRING, 19);
    output.writeString(this.sz2);
    output.writeFieldEnd();
  }
  if (this.sa !== null && this.sa !== undefined) {
    output.writeFieldBegin('sa', Thrift.Type.STRING, 20);
    output.writeString(this.sa);
    output.writeFieldEnd();
  }
  if (this.sb1 !== null && this.sb1 !== undefined) {
    output.writeFieldBegin('sb1', Thrift.Type.STRING, 21);
    output.writeString(this.sb1);
    output.writeFieldEnd();
  }
  if (this.sb2 !== null && this.sb2 !== undefined) {
    output.writeFieldBegin('sb2', Thrift.Type.STRING, 22);
    output.writeString(this.sb2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

